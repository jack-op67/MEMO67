[changelog]
  [1048-20251028] - Lots of small changes, lots of sanity testing
  maths/quaternion stuff. GLTF loading now loads position if it is valid -
  locators are now exported from Blender with bounds origin, not 0,0,0 origin.
  New locator handling/updating within game_entity now mostly working. Last
  commit date was 27th, not 26th.

  [1047-20251027] - Moving the working copy of model locators to game_entity
  instead of model.

  [1046-20251026] - Fixed bug with UI placement after maths/matrices changes.
  [1045-20251026] - Fixed bug with primitive arena reset.
  [1044-20251026] - Work on dev1 level.

  [1043-20251024] - Another note to last commit: also added flag to create a
  default depth_stencil or not, previously there was a bug where a default was
  always created even if it was later replaced.
  [1042-20251024] - New transparency up and running, basically the render_arenas
  get re-drawn in a transparent pass before compositing, needs a bit of work but
  mostly there.
  [1041-20251024] - Working on changing transparency render pipeline.
  [1040-20251024] - Can now set shader from a flag on the object in Blender.
  [1039-20251024] - Fixed bug with triangle_soup initialising with garbage
  triangle data, was calling POP_BYTES() on a memory arena non-linearly, oops.
  [1038-20251024] - I've stripped back the memory_arena debug stuff a bit, using
  POP_SCRATCH(memory_arena*) and keeping that scratch around beyond the next
  linear allocation makes it extremely difficult to then remove that scratch
  from the list of debug memory_arenas if it gets wiped as part of the parent
  arena getting wiped. So I've simplified the debug heavily, and added
  split_arena() which shrinks the parent arena and then does what POP_SCRATCH()
  does.
  [1037-20251024] - Work on prototype memory/level reload/etc. Fixed bug where
  level binary data was getting merged if there are multiple levels getting
  written, and the previous had more entries than the current - just forgot to
  zero out the scratch arena I was using to buffer writes.

  [1036-20251023] - Improvements to primitive_arena_destroy when reloading.
  [1035-20251023] - Internal shader compiling uses memory arenas instead of flex
  allocator now, few bug fixes around primitive_arena setup, some improvements
  to debug_hud.
  [1034-20251023] - Improved some debug_hud.cpp stuff, enabled render stats
  again.
  [1033-20251023] - Fixed a few bugs with memory_arena usage after recent
  changed, added some debug view stuff for memory_arena data.

  [1032-20251022] - More work on render_arena background/static/etc stuff.
  Working on adding debug info for all memory_arenas, it's pretty hacky coz I've
  implemented it to work across .dlls but does the job for debug build.
  [1031-20251022] - game_entities that are added to static_background
  render_arena now get their shader switched out to a absolute minimal colour
  only shader, this is so they don't get lighting, SSAO, etc, I think it looks
  better for backgrounds to be flat - I will add some settings to
  brighten/darken the backgrounds depending on level later.
  [1030-20251022] - Primitive_arenas are now created outside of render_arenas,
  and passed as parameter on initialise to render_arenas as well as resource
  areans - this enables having one primitive_arena shared between multiple
  render_arenas/resource arenas.
  [1029-20251022] - Prototyping work. Working on implementing
  static/dynamic/static_background render arenas, previously everything was
  dynamic, static/dynamic now working but I may need to adjust how I'm handling
  coupling resource arenas and render arenas, the resource and render arena
  primitive_arena_id currently must match before rendering.

  [1028-20251021] - Added some temporary SSAO cbuf settings for testing. Did
  some obvious optimisations around frameset/ssao/bloom/blur.
  [1027-20251021] - Added bloom settings cbuf and gaussian blur settings cbuf.
  [1026-20251021] - Moved bloom and ssao passes to the engine core, game layer
  no longer sets it; I will add render settings to control this stuff later.
  Added better ping-pong for framebuffer stuff. Implemented two-pass
  fast-gaussian blur. Some more artwork testing.

  [1025-20251020] - Instanced meshes now drawing shadows properly.
  [1024-20251020] - Fixed instancing, it broke after changes to resource arena
  stuff.

  [1023-20251019] - Lots of shader and art testing.
  [1022-20251019] - Fixed alt keys not getting handled.

  [1021-20251018] - Level files only generated if there is a level file change,
  fixed bug with viewport/resizing after reload.
  [1020-20251018] - Some hotloading improvements and bug fixes.

  [1019-20251017] - Reimplemented old focus gain/lose callbacks for new
  multi-dll architecture.
  [1018-20251017] - New build.bat pretty much good to go.
  [1017-20251017] - Some more build.bat changes. zlib is now just builit to
  static library and linked against core.
  [1016-20251017] - Updated clang build, will probably remove cmake entirely,
  just using build.bat. Few bug fixes.

  [1015-20251016] - Fixed bug with framebuffer resize registering not bounds
  checking properly, causing a nasty bug overwriting memory in sprite batcher
  update calls.

  [1014-20251015] - Some bug fixes for hotloading.
  [1013-20251015] - Improvements to hotloading, all resources are now reloaded
  as part of hot-recompile, and I've added a separate hotkey to just reload the
  resources without recompiling.
  [1012-20251015] - Documenting some maths implementation details. Added some
  better shader debugging features. Added a new shared HLSL include for using
  #pragma pack_matrix(row_major).

  [1011-20251014] - Working on documenting maths changes etc.

  [1010-20251013] - Work on test level, shadow mapping ortho box has a better
  fit now, but not happy with it, will rewrite it later.
  [1009-20251013] - Working on a better fit for shadow mapping ortho box.

  [1008-20251012] - Fixed a few bugs with SSAO, looks pretty accurate now.
  [1007-20251012] - Some SSAO improvements.
  [1006-20251012] - SSAO working! Needs some work and framebuffer setup is kinda
  hacked in right now so will need to clean that up, but it's working.

  [1005-20251011] - Working on implementing SSAO, old school Crisis style.
  [1004-20251011] - Work on bloom stuff, added specular to directional light
  shader.
  [1003-20251011] - Implemented bloom, extended the frameset a little bit for
  it.

  [1002-20251010] - Fixed some really old matrix order bugs (lol).
  [1001-20251010] - Fixed shadow mapping maths after changes to matrix/maths
  stuff.
  [1000-20251010] - Line renderer no longer gets clipped by camera far_clip.
  [999-20251010] - Fixed bug where skybox was getting clipped when the camera
  far_clip is smaller than the skybox scale.
  [998-20251010] - Cleaning up camera maths, projection stuff,
  standardising, was using some non-standard camera maths which has become
  apparent when trying to match some scenes to Blender's fov, though my maths
  seems to have been correct even before these changes, issues is probably more
  to do with Blender trying to model real-world cameras/sensors.

  [997-20251009] - Skybox can be set from prototypes now, not just core.
  [996-20251009] - More work on level export/import stuff, pretty much working
  as it was before now, just need to hook up the materials.
  [995-20251009] - New level format stuff is mostly working, just got to implement the
  different flags.

  [994-20251008] - Upgrading the Blender level exporter, the level text to
  binary converter, and the level reader to a better format that will let me
  specify the shader and various render flags directly in Blender.
  [993-20251008] - Skybox reflections in composite.
  [992-20251008] - Fixed some edge cases with binding of texture_sets.
  [991-20251008] - Reimplemented skybox to work with render arenas etc.

  [990-20251007] - .jpg files now supported for conversion in project resources.
  Some debug stuff, building a dev scene to properly test a few things.

  [989-20251006] - Bug hunting some UI stuff.

  [988-20251005] - Fixed resize callbacks.

  [987-20251004] - Some improvements to render arena batch draw.
  [986-20251004] - Moved some timing stuff that is platform specific to the
  platform layer.
  [985-20251004] - Basics of terminal are working, with core callbacks as well
  as game layer callbacks. Added a few improvements to key handling.

  [984-20251003] - Started to implement core terminal for text commands.

  [983-20251002] - Working on ui rendering stuff.

  [982-20251001] - Debugging ui rendering, might need to add some extra
  functionality here.
  [981-20251001] - Testing some larger test levels. Some improvements to
  triangle_soup stuff.

  [980-20250930] - Optimised the hashes.txt read/write for project resources.
  [979-20250930] - Prototyping 1-025, adding runtime level format, regens if a
  level source file has been changed.
  [978-20250930] - Prototyping 1-024.
  [977-20250930] - File handling stuff temporarily moved to common directory.
  [976-20250930] - Updates to Blender exporter.

  [975-20250929] - Added a new debug camera view. Fixed some bugs with
  collision, working on basic frustum culling for game entities.
  [974-20250929] - Fixed some bugs with gltf material loading, and a bug with
  setting the submesh shader ids. Also added 'ignore_list' to
  _files_in_directory()_ to ignore specified subdirectories.

  [973-20250928] - Blender exporter updated, the name is just the model name
  now, and it gets translated when the level is loaded (for now, I will cache
  this translation stuff later).
  [972-20250928] - New entity database lookup stuff is basically working now,
  just need to update Blender level exporter stuff.
  [971-20250928] - More work on entity database stuff, new meta programs are
  almost there. Going to write the lookup functions now.
  [970-20250928] - Working on new way to store the entity id/path/anim details,
  my previous version was hitting some scaling issues with macro limits.
  [969-20250928] - Fixed some bugs with model texture path.

  [968-20250927] - Added basic sliding for incline thresholds for collision
  trisoup.
  [967-20250927] - Collision work.

  [966-20250926] - Collision epsilon values are handled more cleanly.

  [965-20250924] - Some cleanup.

  [964-20250923] - Progress on implementing the collision solution - it has
  basically come down to epsilon factors.
  [963-20250923] - Found possible solution for collision bug.

  [962-20250922] - Collision bug hunting.. again.

  [961-20250908] - Cleanup.

  [960-20250901] - Collision work..

  [959-20250812] - Fixed time step progress. Stuck on one stupid bug.

  [958-20250811] - Been bug hunting for hours and hours... on a stupid stale
  matrix bug. Anyway, fixed bug with ghosted rendering after fixed time step
  update. Now back to actual collision work.

  [957-20250810] - Collision work....
  [956-20250810] - Fixed time step collision work.

  [955-20250809] - Added dynamic set of triangle_soup stuff, it is wiped every
  update. Prototyping 1-023.

  [954-20250808] - Prototyping 1-022.
  [953-20250808] - Improvements to transforms.

  [952-20250807] - Fixed some bugs with locator handling.

  [951-20250806] - More collider stuff.

  [950-20250805] - Collider stuff.

  [949-20250804] - Added surface types for tri soup, friction, bouncy, decay.

  [948-20250801] - Improvements to mesh bounds, improvements to triangle soup,
  octtree cells now use indexes instead of storing the triangle directly, I've
  capped it with 2^16 max triangles for now, don't think I will need more,
  working pretty well.

  [947-20250731] - Few bugfixes.
  [946-20250731] - Added some optimisations for adding triangles to soup.
  [945-20250731] - Triangles are added to octtree now via their aabb
  approximation.
  [944-20250731] - Added basics of octtree for triangle soup stuff.
  [943-20250731] - The triangle soup resolution stuff is now working pretty
  well, I'm converting all primitive colliders that need to be tested on it to
  approximate ellipsoids (for speed and so I don't have to implement SAT and
  other algorithms + approximate is plenty for my use case).

  [942-20250730] - More collision progress.

  [941-20250729] - More collision system work.
  [940-20250729] - Removed draw_triangle() backface flag, I wanted to draw the
  backface a different colour for debug and didn't want any shader api stuff to
  be in the primitive render code. So now I'm just calling the function twice
  and changing the cbuf between calls.
  [939-20250729] - Improvements and bugfixes to line renderer, the ring buffer
  was getting stamped out too much before.
  [938-20250729] - Good progress on triangle soup collision stuff.

  [937-20250728] - Basic triangle soup collision stuff.
  [936-20250728] - Added arbitrary triangle drawing draw_triangle(p0, p1, p2),
  for debug stuff.
  [935-20250728] - Terrain collision testing at low poly density.

  [934-20250727] - Shadow bug fix.

  [933-20250726] - Minor bug fixes.

  [932-20250724] - Texture handling updated to pass memory arena stuff.
  [931-20250724] - DLL reloading now handles primitive_arena reset properly,
  this new primitive arena stuff make is a lot cleaner. Also removed dynamic
  array from light stuff, its all on the core memory arena now as well.

  [930-20250723] - Removed _model_id stuff from primitive headers, nothing is
  using it anymore.

  [929-20250722] - Some bugfixes, memory handling in render primitives is more
  robust now.
  [928-20250722] - Bugfixes and further work on memory/arena stuff, propagating
  that stuff thru prototype1.

  [927-20250721] - _resource_data_arena_ now uses a separate memory_arena that
    is around for the lifetime of the app, can add additional
    _resource_data_arena_ later if I need to unload raw resources.
    _resource_arena_ now only has model_data stored, bounds and mesh_datas are
    just stored on the model_data - they are on a fixed-size array with parallel
    hash indices as well, max size is specified up front, this is to avoid
    htable resizes, will see how it goes.
  [926-20250721] - Prototyping 1-021.

  [925-20250720] - More primitive/resource_arena/render_arena work.
  [924-20250720] - Further work on the primitive changes.
  [923-20250720] - Working on some architecture improvements for primitives, so
  that I can throw out an entire memory_arena and all resources are neatly
  removed when the memory_arena is zeroed.

  [921-20250719] - Cleanup / style formatting.
  [921-20250719] - Cleanup / style formatting.

  [920-20250718] - Renaming new stuff now that legacy code is gone.
  [919-20250718] - Removing legacy code part-2, deleted a lot of code.
  [918-20250718] - Removing legacy code part-1.

  [917-20250717] - Bug fixes with mesh unload/load, need to scope the memory
  around that system much tighter.
  [916-20250717] - Prototyping 1-020.

  [915-20250716] - Fixed bug with text primitives dx11 .ByteWidth, not sure how
  that bug has survived so long.

  [914-20250715] - Fixed compile errors for clang and gnu.

  [913-20250714] - Prototyping 1-019.

  [912-20250702] - Fixed the main bug with model resource unload.

  [911-20250701] - Fixed memory leak, bug hunting for resource unload.

  [910-20250630] - Working on resource unloading.

  [909-20250617] - Bug hunting.

  [908-20250525] - Prototyping 1-018.
  [907-20250525] - Animated models can be set to not loop now. Prototyping 1-017.

  [906-20250524] - Prototyping 1-016.
  [905-20250524] - Prototyping 1-015.

  [904-20250523] - Prototyping 1-014.

  [903-20250522] - Origin bug fixes.

  [902-20250521] - Some changes to collider origins.

  [901-20250520] - Prototyping 1-013.

  [900-20250519] - Shadows moved to new renderer.

  [899-20250518] - Pathfinding moved to new collision stuff. Optimised it as
  well.
  [898-20250518] - AABB colliders now get refit to rotation. Prototyping 1-012.
  [897-20250518] - Prototyping 1-011.

  [896-20250517] - Some bug fixes for ui/text stuff.
  [895-20250517] - Terrain get Y working again.
  [894-20250517] - Better support for non-square terrain colliders.

  [893-20250516] - Terrain colliders can now be non square.
  [892-20250516] - Prototyping 1-010.

  [891-20250515] - Added locators to blender static scene export stuff.
  [890-20250515] - Bug fix with collider quadtree lookup, quadtree now has 0,0
  as the centre, not the bottom left. Standalong box colliders working (i.e no
  entity attached). Improvements to blender export scripts. Prototyping 1-009.

  [889-20250514] - Terrain collision now resolves with steepness considerations.
  [888-20250514] - Terrain colliders back in. Bug fixes. Prototyping 1-008.

  [887-20250513] - Bugfix: was reading mesh_header per-submesh rather than
  per-model. Fixed a bug with collider quattree indexing. Wrote a new blender
  python script to export a full scene of static entities to an engine readable
  intermediate file (need to write the final binary version for it later).
  [886-20250513] - Bugfix: metaprogram entity gen was duplicating first frame.
  [885-20250513] - Prototyping 1-007.
  [884-20250513] - Some bug fixes with collision handling, added some more
  collider_flags for various things.

  [883-20250512] - Collision layers enabled again. Added flag to ignore
  collision resolution (notify of hit, but don't resolve position).
  [882-20250512] - Bug fix with locator on model with no animation (1 frame).
  Collision stuff has the collider callback working again, The resolve collider
  now has a void* data member, the collided hit and hit_by void* data member is
  passed to the callback, currently just passing (void*)game_entity* to the
  collison system, but could give it any arbitrary data for callbacks.
  Prototyping 1-006.

  [881-20250511] - Improvements to model/anim handling.
  [880-20250511] - Prototyping 1-005.

  [879-20250510] - Moved main timing stuff (mark_start/end, enable vsync) into
  playform layer. Some further work to collision stuff.
  [878-20250510] - Added hotkey directly in-engine/game to recompile game layer.
  [877-20250510] - Some work on collision stuff. Bug fixes etc.

  [876-20250509] - Replaced transform eulers with quaternions. Already added the
  3rd component to locator in last few updates, forgot to mention. Basically
  just have 3 locators specifying origin, forward, up vector, then I'm just 
  constructing the quaternion from that when needed. Fixed a few bugs and
  removed vstate_global, each view matrix and inv_vp matrix is just stored with
  each camera now, the projection matrix I'm still keeping as a global for now.
  [875-20250509] - Well that was easier than I thought it would be. Quaternions
  now implemented (basics), and the locator orientation is using them (no gimbal
  lock!), my mathematical understanding of quaternions isn't great, absolute
  basics to get the implemented (which was fairly straight forward as they are
  mostly just v4f with some magic maths). Will need to do a deep-dive on them at
  some point. Will move transforms to use quaternions instead of euler angles
  next.

  [874-20250508] - Fine... I've caved and will move to using quaternions, I'm
  getting gimbal lock on my transform orientation stuff, was bound to happen
  sooner or later.
  [873-20250508] - Added another type of locator to model file to specify a
  direction, I will probably add a 3rd vector position to specify an up vector
  as well as forward, currently there are just 2 vector positions specified.
  Locators are now updated as the model changes and transforms are updated
  accordingly, there are probably some performance wins to be had here, will
  have to see how it scales, tho unlikely to be a limiting factor.

  [872-20250507] - Blender export script now works properly with
  locators+animated models, correctly outputs sub-mesh data.
  [871-20250507] - Prototyping 1-004.
  [870-20250507] - Further work on locator stuff, basics all working now - all
  locators are loaded properly now as part of 'model', metaprogram generates all
  the game_entity id matching stuff. 

  [869-20250506] - Improvements + 'model' struct that contains sub 'model_data'
  per frame of animation or 1 frame if no animation. This change is done so that
  I can load locators as transforms and update their position nicely from the
  model_data with a 'model_update' function.
  [868-20250506] - Transform improvements, parenting/unparenting etc. Child
  transforms are implemented with slist currently, this is slow and will change
  later.
  [867-20250506] - Moved transform out from component into common.

  [866-20250505] - Bug fixes. Simplified line renderer to use a ring buffer.
  [865-20250505] - Basics of adding locators to model files.
  [864-20250505] - Metaprogram improvements for handling animation data.

  [863-20250504] - Mesh animations working again, greatly improved the model
  file format as well, rewrote the blender export script. Model read/write code
  needs a lot of cleanup, and animation use code is currently just a hack, need
  to write the system for animations with the new renderer later.

  [862-20250503] - Basic collision are working with new renderer/entity stuff.

  [861-20250502] - Added bounds to resource_arena model load. Started moving
  collision code to new renderer. Prototyping 1-003.
  [860-20250502] - Framebuffer and platform resizing fixed for new architecture.

  [859-20250501] - Switched to using gltf as primary instead of glb as primary,
  custom mesh format now saves img path string per sub-mesh, and models will
  auto-load a texture set populated with those textures on load.
  [858-20250501] - Instancing bug fixes.
  [857-20250501] - Improvements and bug fixes. Prototyping 1-002.

  [856-20250430] - Sub meshes moved to new renderer, mesh + mesh instancing.
  [855-20250430] - Fixed line renderer.
  [854-20250430] - Various improvements and bugfixes. game_code.dll hot load
  stuff now loads immediately when file is fully written, no more fixed Sleep.
  Fixed crash when trying to load new dll when new dll compilation failed, just
  revert back to previous. Prototyping 1-001.

  [853-20250429] - Sprite batcher moved to new renderer.
  [852-20250429] - Optimisations to renderer.
  [851-20250429] - Text one shots moved to new renderer.
  [850-20250429] - Moved text to new renderer.

  [849-20250428] - Further progress on updating ui stuff, basics up and running.
  [848-20250428] - Work on updating sprite ui to use new render stuff.

  [847-20250427] - Found the bug, tricky to find. I was using the old
  vertex_data_byte_size as 'n' in the loop that updates the instance mesh
  model/normal matrices - so it ended up writing beyond bounds and into the next
  flex_header - hence I thought the bug was within flex allocator.

  [846-20250426] - More forward progess, fixed some edge case bugs in flex
  allocator. Game code reloading is working now, just got a bug I'm hunting with
  instance primitives when they get reset when the updated .dll reloads, either
  a bug with how I'm allocating instance_data, or a bug with the flex allocator
  itself.

  [845-20250425] - Lots of progress on clean separation of memory bounds for
  platform/core/game layers. Quad improvements (handling screen quad and other).
  Added 'resource_data_arena' to replace global htable for loaded resource
  blobs.
  [844-20250425] - Hotloading mostly working now.
  [843-20250425] - Bug fixes and progress towards actual code hotloading. Build
  system and entry point have been modified to actually reload the dll, it
  currently works but its pretty buggy and there are graphical glitches - this
  is likely due to bugs with memory concurrency between platform/core/game, the
  platform _seems_ ok, I've done one memory pass on it, I think the main issues
  are with core systems that I haven't fully moved over to using memory arena
  stuff, there are a few global htables hanging around.

  [842-20250424] - Major improvements to handling instances, instance data
  updating is much more efficient. Json parser and gltf file parser now both use
  scratch memory. Project cache file generation not only uses scratch memory.
  Added helper functions to pushing a scratch arena onto an existing memory
  arena. Few bounds checking improvements to flex allocator.
  [841-20250424] - Mesh instancing working with new render architecture. Other
  bug fixes.

  [840-20250423] - Moving more systems to new render architecture. Bug fixes.
  [839-20250423] - Improving rendering design. Good progress. Might remove all
  builtin state including shaders/default deferred framebuffers, leave it
  entirely for game layer. Started on moving collision handling into its own
  arena. Bug fixes.

  [838-20250422] - Bug fixes and forward progress on rendering.
  [837-20250422] - Render state handling improvements.

  [836-20250421] - Progress and bug fixes.
  [835-20250421] - Progress on render_arena stuff.

  [834-20250419] - More progess on render_arena.
  [833-20250419] - Progess on render_arena.
  [832-20250419] - More forward progress on render arena stuff.

  [831-20250418] - Forward progress on render arena stuff.
  [830-20250418] - Branched from branches/flamingo to branches/finch, going to
  remove the component system as it stands, will implement my 'render_arena'
  idea in its place.

  [829-20250417] - Fixed bugs with textures not loading correctly.
  [828-20250417] - Bug fixes. Platform primitives no longer keep a copy of their
  primitive data, it is passed straight through to the (in this case) DX11
  buffer, game systems that require it will have to hold their own copy of the
  data (e.g to modify before passing it back to primitive_update_data(), or use
  in other algorithms, like collision systems, etc).
  [827-20250417] - Forward progress.
  [826-20250417] - Bug fixes.
  [825-20250417] - Further progress, the blank prototype is running.
  [824-20250417] - Further progress fixing runtime bugs.

  [823-20250416] - Disregard last commit strategy, I have brute-forced fixing
  compilier errors. All separate layers are now compiling, time to iron out the
  runtime bugs.
  [822-20250416] - Restructuring code code to use new separated architecture,
  have been mass-converting existing core, but I think I'm going to end up with
  endless debugging, so I'm going to start converting 1 system at a time and
  testing a minimal version as I go. Going to take a while...

  [821-20250415] - Bug fixes, about to start updating core so it can compile.
  [820-20250415] - Further separation work.
  [819-20250415] - Framebuffer separated.
  [818-20250415] - Shader, Texture, Render, now separated and compiling,
  untested.

  [817-20250414] - Further separation work.
  [816-20250414] - Separated platform specific code for textures.
  [815-20250414] - Input code separated into its own .dll, platform code
  statically links to it, done because engine core and platform are separately
  compiled now, and they both need access to input.

  [814-20250413] - Architecture separation work, platform/engine/protos.
  [813-20250413] - Implementing game_memory and memory arena stuff.

  [812-20250412] - Structuring work.
  [811-20250412] - Build.bat changes for building for code reload, the core
  engine and platform specific code is now compiled to an .exe, the game code is
  compiled to a .dll and loaded from core entry. (Working with a temporary
  (empty) prototype to get things up and running).

  [810-20250411] - Removing unused header includes, full core compile time is
  around 17 seconds pre-architecture changes.

  [809-20250409] - Planning architectures changes. Primary goals as follows
  (subject to change):
   -Enable c code reload.
   -Engine core and platform layer will be further separated (they are already
   95% separate), engine and platform layer will be compiled together into a dll
   for the game layer to sit on top of.
   -As part of the code reload directive: system with obvious boundries will
   be modified to use memory arenas and global statics will be removed (e.g
   global textures).
   -Improve component architecture, it works well but I'd like to simplify it
   and ideally remove the c++ templates.

  [808-20250408] - Setup on new dev computer. Prepping branch work.

  [807-20250321] - Commit before branch.

  [806-20250320] - Prototyping #0-168.
  [805-20250320] - Flex_allocator cleanup.

  [804-20250319] - Bit of cleanup.
  [803-20250319] - New allocator up and running, performance needs improving.
  [802-20250319] - Version before rewriting allocator.

  [801-20250318] - Hunting allocator bugs...

  [800-20250317] - Working on bug with gp allocator.
  [799-20250317] - No more windows flashbang.

  [798-20250313] - .
  [797-20250312] - .

  [796-20250119] - Fixed bug with gltf parsing.
  [795-20250119] - Collider quadtree resizing handled properly after zone
  changes.

  [794-20250110] - Where necessary, all components now using custom memory allocator.

  [793-20250105] - Cleanup.

  [792-20250104] - Fixed bug with terrain collision.

  [791-20250103] - Bug found.

  [790-20250102] - Bug hunting.

  [789-20250101] - Cleanup.

  [788-20241230] - Improvements to handling controllers.

  [787-20241217] - Bug fixes.

  [786-20241216] - Found collider terrain bug.

  [785-20241002] - Bug hunting.

  [784-20241001] - Added some more debug hud stuff. Still can't find bug.

  [783-20240930] - Bug hunting.

  [782-20240927] - Work on setting quad tree parameters for collisions/zone from
  scene data.
  [781-20240927] - Added editor scene properties.

  [780-20240926] - Editor improvements, scene writing improvements, etc.

  [779-20240925] - Editor improvements and changes to scene handling.

  [778-20240924] - Bug fixes.

  [777-20240923] - Bug fixes.

  [776-20240902] - .

  [775-20240831] - .

  [774-20240830] - Cleanup.

  [773-20240828] - Prototyping #0-167.

  [772-20240827] - Prototyping #0-166.

  [771-20240826] - Cleanup.

  [770-20240821] - .

  [769-20240820] - .

  [768-20240815] - .

  [767-20240807] - .

  [766-20240806] - .

  [765-20240805] - Cleanup.

  [764-20240804] - Cleanup.

  [763-20240803] - Cleanup.

  [762-20240802] - Cleanup.

  [761-20240801] - Prototyping #0-165.

  [760-20240731] - Prototyping #0-164.

  [759-20240730] - Prototyping #0-163.

  [758-20240729] - Cleanup.

  [757-20240728] - Cleanup.

  [756-20240727] - Prototyping #0-162.

  [755-20240726] - Bug fixes.
  [754-20240726] - Prototyping #0-161.

  [753-20240725] - Starting work on serialisation stuff.

  [752-20240724] - Prototyping #0-160.
  [751-20240724] - Memory allocator bug fix.

  [750-20240723] - Cleanup.

  [749-20240722] - Misc, memory work.

  [748-20240721] - Misc.

  [747-20240720] - Misc.

  [746-20240719] - Misc.

  [745-20240718] - Memory bug hunting.

  [744-20240717] - Memory bug hunting.

  [743-20240716] - More memory work.

  [742-20240715] - Memory improvements.

  [741-20240714] - Cleanup.

  [740-20240713] - Cleanup.

  [739-20240712] - Cleanup.

  [738-20240711] - Memory work.

  [737-20240710] - Memory work.

  [736-20240709] - Memory work.

  [735-20240708] - Cleanup.

  [734-20240707] - Cleanup.

  [733-20240706] - Misc/Reading.

  [732-20240705] - Misc/Reading.

  [731-20240704] - Misc/Reading.

  [730-20240703] - Misc/Reading.

  [729-20240702] - Misc/Reading.

  [728-20240701] - Cleanup.

  [727-20240623] - Cleanup.

  [726-20240622] - Cleanup.

  [725-20240621] - Prototyping #0-159.

  [724-20240620] - Prototyping #0-158.

  [723-20240619] - Cleanup.

  [722-20240618] - Restructuring zone handling.

  [721-20240617] - Prototyping #0-157.

  [720-20240616] - Cleanup.

  [719-20240615] - Cleanup.

  [718-20240614] - Unique custom constant buffer stuff working.

  [717-20240613] - Working on unique custom constant buffer data per renderable.

  [716-20240612] - Chocbar memory split into struct system.

  [715-20240611] - Chocbar memory visualisation done.

  [714-20240610] - Work on chocbar memory visualisation.

  [713-20240609] - WIP memory visualisation.

  [712-20240608] - Bug fixes re terrain/mphyx.

  [711-20240607] - Prototyping #0-156.

  [710-20240606] - Prototyping #0-155.

  [709-20240605] - And more bug hunting.

  [708-20240604] - Bug hunting.

  [707-20240603] - Bug hunting.

  [706-20240602] - Prototyping #0-154.

  [705-20240601] - Prototyping #0-153.

  [704-20240531] - Prototyping #0-152.

  [703-20240530] - Prototyping #0-151.

  [702-20240529] - Prototyping #0-150.

  [701-20240528] - Refresh.

  [700-20240527] - Back.

  [699-20240526] - Cleanup.

  [698-20240524] - Cleanup.

  [697-20240523] - Cleanup.

  [696-20240522] - Cleanup.

  [695-20240521] - Cleanup.

  [694-20240520] - Cleanup.

  [693-20240519] - Cleanup.

  [692-20240518] - Cleanup.

  [691-20240517] - Cleanup.

  [690-20240516] - Cleanup.

  [689-20240515] - Cleanup.

  [688-20240514] - Cleanup.

  [687-20240513] - Cleanup.

  [686-20240512] - Cleanup.

  [685-20240510] - Cleanup.

  [684-20240509] - Cleanup.

  [683-20240508] - Cleanup.

  [682-20240507] - Prototyping #0-149.

  [681-20240506] - Cleanup.

  [680-20240505] - Cleanup.

  [679-20240504] - Cleanup.

  [678-20240503] - Prototyping #0-148.

  [677-20240502] - Prototyping #0-147.

  [676-20240501] - Prototyping #0-146.

  [675-20240430] - Cleanup.

  [674-20240429] - Env cleanup / refresh.

  [673-20240428] - Env cleanup / refresh.

  [672-20240427] - Env cleanup / refresh.

  [671-20240426] - Cleanup.

  [670-20240425] - Cleanup.

  [669-20240424] - Cleanup.

  [668-20240423] - Cleanup.

  [667-20240423] - Cleanup.

  [666-20240422] - Cleanup.

  [665-20240421] - Cleanup.

  [664-20240419] - Cleanup.

  [663-20240418] - Cleanup.

  [662-20240417] - Cleanup.

  [661-20240416] - Cleanup.

  [660-20240415] - Cleanup.

  [659-20240414] - Cleanup.

  [658-20240413] - Cleanup.

  [657-20240412] - Cleanup.

  [656-20240411] - Cleanup.

  [655-20240410] - Cleanup.

  [654-20240409] - Cleanup.

  [653-20240408] - Cleanup.

  [652-20240407] - Cleanup.

  [651-20240406] - Prototyping #0-145.

  [650-20240405] - Prototyping #0-144.

  [649-20240404] - Prototyping #0-143.

  [648-20240403] - Prototyping #0-142.

  [647-20240402] - Refreshing.

  [646-20240401] - Cleanup, back.
  
  [645-20240331] - Cleanup.

  [644-20240330] - Cleanup.

  [643-20240329] - Cleanup.

  [642-20240328] - Cleanup.

  [641-20240327] - Cleanup.

  [640-20240326] - Cleanup.

  [639-20240325] - Cleanup.

  [638-20240324] - Cleanup.

  [637-20240323] - Cleanup.

  [636-20240322] - Cleanup.

  [635-20240321] - Cleanup.

  [634-20240320] - Cleanup.

  [633-20240319] - Cleanup.

  [632-20240318] - Cleanup.

  [631-20240317] - Cleanup.

  [630-20240316] - Cleanup.

  [629-20240315] - Cleanup.

  [628-20240314] - Cleanup.

  [627-20240313] - Cleanup.

  [626-20240312] - Fixed bug with static mesh after scene load.

  [625-20240311] - Prototyping #0-141. Added 'replace mesh' editor
  functionality.

  [624-20240310] - Cleanup.

  [623-20240309] - Fixed bug with controller deadzone.

  [622-20240308] - Bug fixes and speed testing allocator (~540% faster than
  malloc/free, fragmentation ratios not yet tested).

  [621-20240307] - Fixed bug with gp allocator, tested with 100m random size
  allocations / frees, seems to be working as expected now.

  [620-20240306] - Debugging gp allocator.

  [619-20240305] - Few more bug fixes.
  [618-20240305] - Fixed a few bugs with chocbar allocator.

  [617-20240304] - Added general purpose allocator. The two allocators (general
  purpose & chocbar) work in tandem. All malloc/free calls have been replaced,
  other than the single call used by each allocator (will likely need a few
  extras later when resizing is implemented).
  [616-20240304] - Improvements to chocbar allocator.

  [615-20240303] - Started work on memory allocator(s), implemented basic
  'pool/block' allocator (chocbar), it's a fixed-size block allocator that can
  allocate and free, ~160% faster than malloc/free - not yet tested for robustness.
  [614-20240303] - Prototyping #0-140.

  [613-20240302] - Prototyping #0-139.
  [612-20240302] - Added date/time tracking, platform agnostic after
  initialisation.

  [611-20240301] - Improvements to audio_map.
  [610-20240301] - Added tag component (just tags a u16 to entities). Added
  helper function to lookup entities by tag. Added save/load stuff for tag
  component. Prototyping #0-138.

  [609-20240229] - Improvemets to audio_map component. Prototyping #0-137.
  [608-20240229] - Added 'audio_map' component, it contains audio ids that are
  indexed and played back via sampling an array/map/texture. Will be used for
  terrain surface audio playback.

  [607-20240228] - Prototyping #0-136.

  [606-20240227] - Prototyping #0-135.
  [605-20240227] - Added sprite_ui callback to update its shader cbufs (may be
  revised, not sure this architecture is best), added some cbuf update helper
  functions. Prototyping #0-134.

  [604-20240226] - Prototyping #0-133.

  [603-20240225] - Prototyping #0-132.

  [602-20240224] - Prototyping #0-131.

  [601-20240223] - Prototyping #0-130.

  [600-20240222] - Prototyping #0-129.

  [599-20240221] - Prototyping #0-128.

  [598-20240220] - Prototyping #0-127.

  [597-20240219] - Prototyping #0-126.

  [596-20240218] - Cleanup.

  [595-20240217] - Improvements to collider handling. Changed commit date format
  (YYYYMMDD).

  [594-160224] - Found and fixed bug I was looking for, re: collider disabling.

  [593-150224] - Bug hunting again.

  [592-140224] - Bug hunting.

  [591-130224] - Prototyping #0-125.

  [590-120224] - Prototyping #0-124.
  [589-120224] - Documenting some collision system stuff.

  [588-110224] - Bug hunting.

  [587-100224] - A* bugfixes, working well now.

  [586-090224] - Implementing pathfinding stuff, A* basics done, few bugs.

  [585-080224] - Prototyping #0-123.
  [584-080224] - Work on zone/scene update routine separation.

  [583-070224] - Cleanup / returned from trip.

  [582-060224] - Cleanup.

  [581-050224] - Cleanup.

  [580-040224] - Cleanup.

  [579-030224] - Cleanup.

  [578-020224] - Cleanup.

  [577-010224] - Cleanup.

  [576-310124] - Cleanup.

  [575-300124] - Cleanup.

  [574-290124] - Cleanup.

  [573-270124] - Cleanup.

  [572-260124] - Cleanup.

  [571-250124] - Cleanup.

  [570-240124] - Cleanup.

  [569-230124] - Cleanup.

  [568-220124] - Laptop test commit.

  [567-210124] - SVN repository cleanup.

  [566-200124] - Prototyping #0-122.

  [565-190124] - Fixed bug with editor delete.

  [564-180124] - Prototyping #0-121.
  [563-180124] - Fixed bug with terrain collider intersect.
  [562-180124] - Terrain colliders now have per-collider widths. Prototyping
  #0-120.

  [561-170124] - Prototyping #0-119.

  [560-160124] - Imrovements to gltf->custom mesh file, ordering sub meshes to
  their respective suffixes. Prototyping #0-118.
  [559-160124] - Fixed shadow pass for multi-mesh (non-instanced).

  [558-150124] - Prototyping #0-117.
  [557-150124] - Added separate bounds debug view.

  [556-140124] - Added editor inspector tab for render flags.

  [555-130124] - Resource cleanup stuff.

  [554-120124] - Prototyping #0-116.
  [553-120124] - Updating prototype material stuff.

  [552-110124] - Cleanup and testing multi-mesh with release builds. Works fine.
  [551-110124] - Prototype is in a playable state again, now with multi-meshes.

  [550-100124] - Editor work, bug fixes with colliders, ui improvements.

  [549-090124] - More work to editor layout.

  [548-080124] - Added various ui functions, improvements to editor.
  [547-080124] - Added larger img preview on img_list hover.

  [546-070124] - Added text_input click to unbind. Work on editor stuff.

  [545-060124] - Added searchable_mstring_set to text_list, can now search the
  text_list which filters the results.
  [544-060124] - Basics of searchable_mstring_set implemented (brute-force).

  [543-050124] - Refresh development env.

  [542-040124] - Editor now uses an editor-specific composite shader.
  [541-040124] - UIs can now auto-hide when mouse leaves their rect. Sprite
  selectables are now sorted correctly.

  [540-030124] - Lots of work to editor structure.

  [539-020124] - Material ids are now just u64 instead of uid64, so that I can
  easily lookup via mstring.
  [538-020124] - Improvements to scene write/read, only scene-specific materials
  are written now. Lots of improvements to editor UI handling.
  [537-020124] - UI now uses materials instead of textures on creation,
  sprite_uis no longer create a unique material by default.

  [536-010124] - Working on editor support for multiple materials, selectables
  now handle multiple meshes (models).
  [535-010124] - Fixed bug with texture_set binding.

  [534-311223] - Fixed bug with mesh caching for multiple meshes.

  [533-301223] - Multiple mesh work.

  [532-291223] - Work on scene, model component, etc. 

  [531-281223] - Work on writing scenes with model component stuff. 

  [530-271223] - More work on reading/writing scene files with multiple meshes.

  [529-261223] - Work on writing scene files with multiple meshes.

  [528-251223] - Work on cleanup for multiple mesh.

  [527-241223] - Animation file format for multiple mesh support basics done.
  [526-241223] - Updating animation file format for multiple mesh support (wip).

  [525-231223] - More multiple mesh support stuff.
  [524-231223] - Updating mesh file format to work with multiple meshes (wip).

  [523-221223] - More work towards multiple mesh/material support.
  [522-221223] - Wip towards multiple mesh/material support.

  [521-211223] - Updated editor UI to use new UI_X coords.
  Commit before working on multiple mesh support.

  [520-201223] - Prototyping #0-115.

  [519-191223] - Minor cleanup.

  [518-181223] - Some changes to render order of framebuffers.
  [517-181223] - Fixed bug with gltf parsing.

  [516-171223] - Prototyping #0-114.
  [515-171223] - Prototyping #0-113.

  [514-161223] - Prototyping #0-112.

  [513-151223] - Added transform component functions to replace the transform
  pointer, as well as revert back to original.
  [512-151223] - Prototyping #0-111.
  [511-151223] - Checks for input state are now done with bitflags.

  [510-141223] - Prototyping #0-110.
  [509-141223] - Prototyping #0-109.

  [508-131223] - Prototyping #0-108.
  [507-131223] - Prototyping #0-107.
  [506-131223] - Prototyping #0-106.

  [505-121223] - Prototyping #0-105.
  [504-121223] - Prototyping #0-104.

  [503-111223] - Prototyping #0-103.

  [502-101223] - Prototyping #0-102.

  [501-091223] - Prototyping #0-101.
  [500-091223] - Now passing normal_matrix to instance shaders.

  [499-081223] - Lots of changes to handling of loaded/loading scenes. Scene
  locators are now stored with scene_name as prefix.
  [498-081223] - Prototyping #0-100.

  [497-071223] - Prototyping #0-99.
  [496-071223] - Prototyping #0-98.
  [495-071223] - Improvements to UI layout stuff. Added helper function to
  convert an ASCII array representing a set of UI elements to arrays of
  UI positions and dimensions.

  [494-061223] - Prototyping #0-97.
  [493-061223] - Bug fixes and prototyping #0-96.

  [492-051223] - Prototyping #0-95.

  [491-041223] - Prototyping #0-95.
  [490-041223] - Prototyping #0-94.
  [489-041223] - Fixed bug with popups. Fixed bug with overlapping selectable
  ids.

  [488-031223] - Prototyping #0-93.

  [487-021223] - Updates to keymap input stuff. Prototyping #0-92.
  [486-021223] - Working on updating keymap funcs for new lwr/upr key handling.
  [485-021223] - Prototyping #0-91.
  [484-021223] - Prototyping #0-90.

  [483-011223] - Prototyping #0-89.
  [482-011223] - Prototyping #0-88.

  [481-301123] - Prototyping #0-87.
  [480-301123] - Prototyping #0-86.

  [479-291123] - Added MR_EDITOR_ONLY render flag. Updating prototype_0.
  [478-291123] - Locators always use string ids now, no more hash_ids, not worth
  the hassle to save a couple of bytes, updated scene read/write with new
  locator name.

  [477-281123] - Editor selectables and game selectables are now separated via
  bitflag and handled appropriately.
  [476-281123] - Imrovements to collider quad tree. Added debug hud for some
  collider quad tree info.
  [475-281123] - Fixed bug with dyanmic colliders not evaluating callbacks when
  mphyx not present.

  [474-271123] - Updating prototype_0.
  [473-271123] - Updating prototype_0.

  [472-261123] - Added better enforcement for maxmimum lights.
  [471-261123] - Bug fixes, namely fixed bug with shadow buffers getting invalidated
  before shadwos are drawn.
  [470-261123] - Hunting memory bugs. Fixed all compiler warnings (gnu).

  [469-251123] - Updates to per-vertex animation playback.
  [468-251123] - Updating prototype_0.

  [467-241123] - Updating prototype_0, bug hunting.
  [466-241123] - Added text one shot for new text component.
  [465-241123] - Updating prototype_0.

  [464-231123] - Some bug fixes re: editor material changes.
  [463-231123] - Updating prototype_0.
  [462-231123] - Added basics for a scene outliner. Added bbox locator. Added
  scale drag for editor inspector transform button. Bug fixes with terrain
  collider.

  [461-221123] - Fixed some collision set bugs.
  [460-221123] - Updating prototype_0.

  [459-211123] - Added drag increment for editor transform inspector.
  [458-211123] - Improved default position for scene object add. Cleanup and
  improvements to resource headers, enforcing magic number checks. Added version
  numbers to resource headers.

  [457-201123] - Fixed bug with buffer handle writing, and a few other minor bugs.
  [456-201123] - Testing stacked terrain collisions. Added support for locator
  duplication. Added backup scene write. Fixed bug with buffer handle writing
  buffer size, not actual write size. Improvements to written resource hash
  files, up-to-date in-memory structures are now reflective of changes to
  resource file additions. Editor mesh list is now updated with newly added
  resource files (not just changed).

  [455-191123] - Some work on shader utils and composite pass.

  [454-181123] - Updating prototype_0.
  [453-181123] - Fixed another bug with collision offsets. Improvements to
  collision code. Updating prototype_0.

  [452-171123] - Fixed bug with collision offsets.

  [451-161123] - Moved skybox sampling to transparent resolve pass, will need to
  add a new transparent shader key + render flag if non-transparent objects 
  need skybox reflectance (i.e shiny/metal), detailed in dailies head.
  [450-161123] - Fixed bug with shader utils, updated skybox to use resource
  files, added skybox sampling to composite pass, added skybox bind util
  function.
  [449-161123] - Fixed some bugs with locator naming within editor.

  [448-151123] - Added locators to scenes, can store pos/radius and lookup via
  name. Save/load updates for locator support. Added locator editor support,
  added selected mesh text info.

  [447-141123] - Fixed a frustum culling bug, added frustum cull toggle to
  editor inspector. 
  [446-141123] - More work on collision stuff.
  [445-141123] - Terrain collision work.

  [444-131123] - Added terrain collider type, can add a terrain collider to a
  valid mesh renderer (mesh must be even grid), added bbox-terrain collision
  resolution. Scenes now write/load colliders.

  [443-121123] - Updating prototype_0.

  [442-111123] - Updating prototype_0.

  [441-101123] - Updating prototype_0, fixed bug with mesh_data loading even
  when mesh already loaded, other bug fixes and cleanup.

  [440-091123] - Added camera stack, topmost stack camera is active. Working on
  updating prototype_0 to use new features.
  [439-091123] - More work on transparency stuff, added various toggles to
  material inspector (alpha clip, shadows, etc).
  [438-091123] - Improvements to transparency stuff.

  [437-081123] - Added cull routine for drawing selectable ids. Updated
  instancing to work with 3d animation stuff.
  [436-081123] - Improvements to editor layout.

  [435-071123] - Rendering optimisations, reduced texture bind calls, reduced
  vertex/index/layout bind calls.
  [434-071123] - Cleaned up resource bundle path handling and generation
  handling, much cleaner. Added command line flag to build release bundles as
  well as building builtin bundle binary.
  [433-071123] - Work on resource file writing / bundle handling. Doing some
  stress testing on larger scenes.

  [432-061123] - Fixed bugs with, and updated release build resource bundle stuff,
  still need to cleanup a lot of the generation code, bit confusing.
  [431-061123] - Added packed animation file read/write.
  [430-061123] - Started on packed animation file format.

  [429-051123] - Cleanup and animation testing.
  [428-051123] - Added per-vertex 3d animation system + component for playback,
  very simple.
  [427-051123] - Shader hotloading working again.

-
  [426-041123] - Commit before cleanup.

  [425-031123] - Improvements to shader handling. Improvements to scene
  write/load.

  [424-021123] - Improvements to scene stuff, working on updating prototype to
  use new resource/scene stuff. Integrated scene load/save into bundle stuff.
  [423-021123] - Improvements to ui. Text input is now blocked for code that
  is outside of text_edit context during text input.
  [422-021123] - Added mesh hotload.

  [421-011123] - Added scene list for load/save. Added text display offset
  (display text starting at x character index).
  [420-011123] - Improvements to text list.
  [419-011123] - Added duplicate selection and delete selection.
  [418-011123] - More work on img list. Can now change model texture via
  material inspector (basic).

  [417-311023] - Added wip image list (grid of scrollable images).
  [416-311023] - Added mouse over popups for selectables.

  [415-301023] - Improvements to gizmos, now with bidirectional, and root
  handles, shift to scale on any gizmo. Work on scene load/save.

  [414-291023] - Work on material tab for editor inspector.
  [413-291023] - Added ui checkbox, bug fixes.

  [412-281023] - Improvements and bug fixes. Work on inspector transform ui.

  [411-271023] - Further tweaks to ui stuff.
  [410-271023] - Minor tweaks to ui wrapper + commenting quirks. Window size 
  minimums are now enforced.

  [409-261023] - Trying to find source of weird resize flicker bug. Have found
  two temporary fixes, though further enquiry is probably necessary, I think it
  may be a vendor-side bug as pc restart fixes it, gpu driver restart doesn't fix,
  assumption is that Desktop Window Manager from Windows is causing it.
  [408-261023] - Work on aspect ratio and UI, target aspect ratio is now
  predefined, UI is positioned to conform to a rect of the defined
  aspect ratio, regardless of resize; similar to aspect ratio 'black bars'.

  [407-251023] - Work on ui stuff.
  [406-251023] - Some changes to default text origins, and updates to text_list.

  [405-241023] - More work on text stuff.
  [404-241023] - Fixed some bugs with text positioning re: ui wrapper/grid
  system.

  [403-231023] - Various improvements and cleanup for text edit, text, ui, added
  callbacks for text_edit on carriage return, bit of builtin shader work, added
  transform translation and scale to editor inspector, can change its properties
  via text field.

  [402-221023] - Extremely basic scene save/load, just handling transform and
  mesh at the moment. Needs heavy cleanup, spaghetti.
  [401-221023] - Commit before implementing component containers stored as part of
  scenes.
  [400-221023] - Improvements to ui wrapper.
  [399-221023] - Further ui work, improvements to ui wrapper, added drag scroll
  to text lists.

  [398-211023] - More work on ui stuff.
  [397-211023] - Working on moving the wrapper in prototype_0 into core, will
  probably private some of the raw sprite_ui, only access sprite_ui indirectly
  through ui wrapper (the wrapper just constrains positions and sizes to a grid,
  and handles resizing of elements correctly. Also handles child/parent
  transform, but I will likely move that out to more general transform stuff).

  [396-201023] - Gizmo improvements, selection improvements.

  [395-191023] - Added separate gizmo component (no longer a flag of mesh_renderer).
  [394-191023] - Bug fixes and improvements to selection stuff.
  [393-191023] - Added hashset data structure. Multiple selectables can now be
  selected (excluding sprite_ui), shift to add to selection, ctrl to remove from
  selection. Selected selectables are drawn in pulsing wireframe.

  [392-181023] - Selectable ids are now rendered in a separate pass, whilst this
  method is slightly slower (for now), manually handling output of correct
  select_id in each shader was becoming cumbersome. This simplifies a lot of
  stuff regarding framebuffers/deferred routines, etc. There are many optimisations
  I can think of to implement later on, but for now, any
  mesh_renderer/sprite_renderer/sprite_ui that has a selectable, is redrawn in
  the selectable pass.
  [391-181023] - Editor mesh list is populated with bundle_resource names now.
  Some changes to project hashes, including bundle name per entry.

  [390-171023] - Added selectable func pointer 'on_hold'. Selectables with a
  valid 'on_hold' function will run regardless of if the mouse remains on the
  selectable, just needs initial click, expected behaviour. Clicking on a mesh
  list element will create a scene object on the current scene.
  [389-171023] - Adding editor controls. Basic gizmo etc. Not 100% on
  editor/scene/objects design yet.
  [388-171023] - Improvements to text lists. Added available meshes text list
  for editor.

  [387-161023] - Added scrollable text list (working with selectables).
  [386-161023] - Text edit cleanup. (last commit was 151023, not 161023).

  [385-151023] - Changed 'text box' to 'text edit', i.e the text input is
  directly bound to a text component, rather than to a 'text box' wrapper,
  makes things a bit simpler. Added text blink caret.
  [384-151023] - Changed how input is stored, internal arrays are now more
  agnostic, VK keys are now converted to corresponding interal key. Added 
  function to translate last VK code to ascii char for text box input.

  [383-141023] - Added functional text box. Preprocessor cleanup.

  [382-131023] - Added queue data structure. Added selection history. Added
  selectable 'on_deselect()' callback.
  [381-131023] - Added stack datastructure. Added 'core_state', defined core 
  states can be popped/pushed onto stack, the topmost state will be the one that
  is run (i.e splash screen, debug, editor, play, etc). Added user typing input
  into text component, for later use with text boxes etc.

  [380-121023] - Moved splash screen into core. Removed redundant code for old
  reousrce generation stuff. Work on scene / debug hud.

  [379-111023] - Optimisations, cleanup, and improvements for bundle and cache 
  handling, builtin bundles can now be embedded into executable.

  [378-101023] - Optimisations for file read/write.
  [377-101023] - Cleanup for project cache stuff. Hotloading re-enabled for
  textures. Improvements to resources hash handling, cache files will be
  generated as soon as source files are modified/added.

  [376-091023] - Fixed bug with htable iterator not walking buckets that contain
  collided hashes (buckets with valid linked lists) correctly. Fixed bundle
  packing/loading hash generation bug.

  [375-081023] - Bug fixes.

  [374-071023] - Work on loading from cached files.

  [373-061023] - Work on resource hashing.

  [372-051023] - Renaming.

  [371-041023] - Repo update.
  [370-041023] - Renaming.

  [369-031023] - Updating non-versioned files to new repo source, and removed
    .git, and .cache from svn.
  [368-031023] - Updated repository source, now on ssh server.

  [367-021023] - Finishing up ssh server. Working on a scene system.

  [366-011023] - Setting up Linux box for ssh, going to move repo.

  [365-300923] - Cleanup, planning basic basic editor for position static models.

  [364-290923] - Resource work.

  [363-280923] - Again more bundle work.

  [362-270923] - More bundle work.

  [361-260923] - Bundle work.

  [360-250923] - Clean up.
  [359-250923] - Finished iterators for htable and darray.

  [358-240923] - More work on some iterator stuff.

  [357-230923] - More work on resource restructuring, adding some iterator stuff
  to data structures.

  [356-220923] - More work on resource restructuring.

  [355-210923] - More work on resource/file/resource cached hash file etc.
  [354-210923] - More work on resource restructuring.

  [353-200923] - More work on resource restructuring.

  [352-190923] - Continued work on bundle/resource/file handling restructure,
  resouce bundles are now compressed on a per resource basis, not via
  compressing the entire bundle data.

  [351-180923] - Continued work on bundle/resource/file handling restructure.

  [350-170923] - Continued work on bundle/resource/file handling restructure.

  [349-160923] - Continued work on bundle/resource/file handling restructure.

  [348-150923] - Working towards restructuring bundles and resource files so
  that release build will use bundled/compressed data, and debug will use
  individual files to re-enable hotload/live editing.

  [347-140923] - Prototyping #0-85.

  [346-130923] - Prototyping #0-84.

  [345-120923] - Prototyping #0-83.

  [344-110923] - Prototyping #0-82.

  [343-100923] - Prototyping #0-81.

  [342-090923] - Prototyping #0-80.

  [341-080923] - Prototyping #0-79.

  [340-070923] - Prototyping #0-78.

  [339-060923] - Prototyping #0-77.

  [338-050923] - Prototyping #0-76.

  [337-040923] - Prototyping #0-75.

  [336-030923] - Prototyping #0-74.

  [335-020923] - Clean up.

  [334-010923] - Prototyping #0-73.

  [333-310823] - Prototyping #0-72.

  [332-300823] - Prototyping #0-71.

  [331-290823] - Prototyping #0-70.

  [330-280823] - Prototyping #0-69.

  [329-270823] - Prototyping #0-68.

  [328-260823] - Prototyping #0-67.

  [327-250823] - Prototyping #0-66.

  [326-240823] - Prototyping #0-65.

  [325-230823] - Prototyping #0-64.

  [324-220823] - Prototyping #0-63.

  [323-210823] - Cleanup.

  [322-200823] - Cleanup.

  [321-190823] - Prototyping #0-62.

  [320-180823] - Prototyping #0-61.

  [319-170823] - Prototyping #0-60.

  [318-160823] - Prototyping #0-59.

  [317-150823] - Prototyping #0-58.

  [316-140823] - Prototyping #0-57.

  [315-130823] - Prototyping #0-56.

  [314-120823] - Prototyping #0-55.

  [313-110823] - Prototyping #0-54.

  [312-100823] - Prototyping #0-53.

  [311-090823] - Prototyping #0-52.

  [310-080823] - Engine renaming.
  [309-080823] - Commit before rename.
  [308-080823] - Correcting commits after repo changes 0.

  [307-070823] - Commit after further repo changes.

  [306-060823] - Commit after repo changes.

  [305-050823] - Further work to transparency pass, namely improvements to
  lighting pass after transparent pass. Added transparency shader key.
  Prototyping #0-51.

  [304-040823] - Removed mesh/sprite downres stuff. Work on transparency pass.
  [303-040823] - Work on transparency stuff. Commit before removing mesh/sprite
  downres framebuffers.

  [302-030823] - Prototyping #0-50.

  [301-020823] - Prototyping #0-49.

  [300-010823] - Prototyping #0-48.

  [299-310723] - Bug fixes and improvements. Prototyping #0-47.

  [298-300723] - Bug fixes and improvements.
  
  [297-290723] - Finished text component stuff.

  [296-280723] - Work on text component, almost done.

  [295-270723] - Added shared shader files (for util functions etc). Started
  work on changing text from a standalone system to a regular component. Prototyping
  #0-46.

  [294-260723] - Added composite input texture viewer. Other improvements/cleanup/bug fixes.

  [293-250723] - Further changes to shadowmapping and encompass frustum stuff.

  [292-240723] - Further changes to combine pass stuff. Fixed encompass frustum
  matrix function for shadow mapping.

  [291-230723] - Added combine gbuf passes prior to composite pass.

  [290-220723] - Added shared functions to shaders. Prototyping #0-45.

  [289-210723] - Prototyping #0-44.

  [288-200723] - Minor changes to how colliders are stored, colliders can be
  independently created (i.e, not bound to uid). Prototyping #0-43.

  [287-190723] - Prototyping #0-42.

  [286-180723] - Prototyping #0-41.

  [285-170723] - Added hover callback func to selectable components. Prototyping #0-40.

  [284-160723] - Prototyping #0-39.

  [283-150723] - Added sprite_ui order sorting, bug fixes and improvements. 
  Prototyping #0-38.

  [282-140723] - Bug fixes and improvements. Prototyping #0-37.
  
  [281-130723] - Added a basic loading screen with a thread dispatch api which
  force draws specified loading screen sprite_uis whilst waiting for the thread
  to finish, don't really want to split the engine to a render thread/main 
  thread architecture, so this is a minimal alternative to keep things simple for now.

  [280-120723] - Added separate ui render framebuffer. UI should be forward
  rendered by default. Added some additional functions for rendering ui pass
  etc. Added sprite_ui placement origins. Prototyping #0-36.

  [279-110723] - Prototyping #0-35.
  [278-110723] - Minor changes to sprite/mesh renderer staging. Prototyping #0-34.

  [277-100723] - Sprite renderer and mesh renderer can now stage draw calls with
  unique transforms. Prototyping #0-33.
  [276-100723] - Added resource_to_shader support, some changes to shader,
  primarily, removed storing htable with shader file name lookup, projects should
  manage shader ids along with relevant bundle stuff. Prototyping #0-32.
  
  [275-090723] - Added support for variable cursor sizes. Bug fixes and
  improvements. Mesh instances now properly support atlas frames (previously all
  frames were the same).

  [274-080723] - Added hardware cursor changing. Some changes to components,
  materials can be added externally so that entities can share materials easily.
  Prototyping #0-31.

  [273-070723] - Bug fixes to components. Prototyping #0-30.

  [272-060723] - Bug fixes and improvements. Lots of improvements to
  controller/kb input handling. Prototyping #0-29.

  [271-050723] - Bug fixes and improvements. Prototyping #0-28.

  [270-040723] - Improvements to htable, fixed a nasty bug (not sure how it
  didn't produce any noticeable errors). Htable size is now always prime.

  [269-030723] - Various bug fixes and improvements. Finally added looping for
  htable, as well as other htable improvements. htable is ~150-200% faster for
  looping than std::unordered_map, and ~300-400% faster for lookup. Tested with
  100,000,000 entries, K = u32, V = u32.

  [268-020723] - Prototyping #0-27.

  [267-010723] - Prototyping #0-26.
  [266-010723] - Added func pointer to selectable, added polling for selectable
  mouse over to call func pointer. Improvements to sprite_ui.

  [265-300623] - Prototyping #0-25.

  [264-290623] - Prototyping #0-24.
  [263-290623] - Fixed selection id artifacts.

  [262-280623] - Improvements to selection/outlines. Various other improvements.

  [261-270623] - Prototyping #0-23.

  [260-260623] - Prototyping #0-22.

  [259-250623] - Cleanup.

  [258-240623] - Prototyping #0-21.

  [257-230623] - Prototyping #0-20.

  [256-220623] - Prototyping #0-19.

  [255-210623] - Prototyping #0-18.

  [254-200623] - Prototyping #0-17.

  [253-190623] - Cleanup.

  [252-180623] - Bug fixes, think there is a bug with untracking, some uid keys
  are colliding for some reason.

  [251-170623] - Added 'staging' pipeline for mesh renderers and sprite
  renderes, so that untracked renderers can be inserted into the render
  pipeline. Not sure if this route is ideal, may be replaced.

  [250-160623] - Cleanup.

  [249-150623] - Bug fixes.

  [248-140623] - Bug fixes.

  [247-130623] - Prototyping #0-16.

  [246-120623] - Prototyping #0-15.

  [245-110623] - Prototyping #0-14.

  [244-100623] - Prototyping #0-13.

  [243-090623] - Prototyping #0-12.

  [242-080623] - Clean up, mild refactors.

  [241-070623] - Resource packing/loading working for audio/meshes/textures now.
   Going to clean up redundancies.

  [240-070623] - Version 0 of resource file packing working for textures. DDS
  files are now packed to minimal representation in bundle (i.e discards unused
  data blocks beyond mips/pixels/header). Fixed bug with mstring/char* hashing.

  [239-060623] - Further work on resources/files etc. Drastic changes, almost
  done.

  [238-050623] - Working on resource file packing/loading, as well as general
  resource database/bundle system.

  [237-040623] - Cleaned up sprite 3d, skews and cardinals are more robust in
  regards to variabililty now. Fixed compiler warnings. Started on adding
  resource packing for single file resource files. Added zlib compression
  (wrapper around minimal third-party). Memo67 LOC is around 18k now (excl. zlib).

  [236-030623] - Fixed bug with instancing. Split first and second pass lighting
  framebuffers (b/c they are not guaranteed to be same dimensions). Added fixed
  8 skew sprite packer. Bug fixes.

  [235-020623] - Testing some graphics styles. Now sending model matrix as
  instance model data. Bug fixes and improvements.

  [234-010623] - Fixed shadows for new buffer setup. Working on render target
  setups. Bug fixes and cleanup.

  [233-310523] - Added custom gbuffer setup. Bug fixes and cleanup.

  [232-300523] - Meshes can now be separately rendered downscaled. Prototyping
  #0-11.

  [231-290523] - Get neighbouring colliders now returns with the uids sorted by
  distance to source. Prototyping #0-10.
  
  [230-280523] - Bug fixes.

  [229-270523] - Added generic outline shader that works for sprite, and mesh
  renderers. Mesh_renderer now renders select_id.

  [228-260523] - Prototyping #0-9.

  [227-250523] - Prototyping #0-8.

  [226-240523] - Added quadtree for colliders (no Y component, for now).
  Dynamic and static colliders are now stored on different tables, done for
  performance, couple of bugs to hammer out. Prototyping #0-7.

  [225-230523] - Added collision layer matrix, separated collision layer and
  collision trigger layer.  Prototyping #0-6.

  [224-220523] - Improvements to text. Prototyping #0-5.

  [223-210523] - Added audio loop stop. Added projectile motion. Replaced _force
  with _velocity, and added function add_force.

  [222-200523] - Audio bug fixes. Added width param to line instances.

  [221-190523] - Fixed issue with first mesh instance not being drawn. Added
  alpha_clip blend type. Other bug fixes and cleanup. Should be back on track
  for prototyping.

  [220-180523] - Added separate input layout shaders for directx. Removed
  shader_id from render_primitives, they only exist in standalone shaders now.
  Improvements to sprite batching and mesh instancing.

  [219-170523] - Cleaned up mesh instancine. Added various utility functions.
  Bug fixes. Added framebuffer resizing for injected passes.

  [218-160523] - Added mesh_renderer generic instancing, needs cleanup but
  working well. Optimised constant buffer update frequency. General
  improvements and bug fixes.

  [217-150523] - Added a few helper functions. Further work on custom pass
  injection. Prototyping #0-4.

  [216-140523] - Added custom shader pipeline. Added custom pass framebuffer
  injection for additional render passes outside of core render passes. Various
  bug fixes and cleanup.

  [215-130523] - Bug fixes. Started a refactor on shader stuff.

  [214-120523] - Fixed some minor memory leaks. Added hotloading for tiles.
  Bug fixes for mstring. Added wireframe cube/sphere debug. Prototyping #0-4.

  [213-110523] - Added function to render transparent sprites after other
  sprites, this is so I can use a different shader and not write to gbuf_wpos so
  shadows aren't stopped at the transparent sprite. Not ideal, replace it later.
  Added better encompass frustum function. Prototyping #0-3.

  [212-100523] - Added caching of meshes for mesh component. Prototyping #0-2.

  [211-090523] - General cleanup. Prototyping #0-1.

  [210-080523] - Added selectable component. Fixed shadow offset bug. Fixed
   asserts printing msgs regardless of fail/success.

  [209-070523] - Added csv loading. Added id to batching. Bug fixing and
   cleanup.

  [208-060523] - Implemented staging/map for id picking correctly, previously
  wasn't accounting for performance hit from synchronising cpu/gpu. Added
  precise sleep function, as well as cleaned up time functions. Added accurate
  fps limiting.

  [207-050523] - Added forward outline shader. Added feature to ensure same
  textures aren't reloaded. Working on selection.

  [206-040523] - Added ui sprite (forward rendered). Added billboard shader. 
  Added property component which is essentially a set a bitflags that can be 
  used for custom properties.

  [205-030523] - More bug fixing for collision/mphyx. Added fixed time step for
   mphyx updates. Collisions/mphyx working as intended for now.

  [204-020523] - Bug fixing for collision/mphyx.

  [203-010523] - Finishing basic collisions/mphyx. Working well, just need to cleanup
  and better check objects moving at higher velocity, e.g some things are getting
  stuck in the ground when landing.

  [202-300423] - Working on physics collisons.

  [201-290423] - Added basic physics. Added bsphere and bbox colliders and
  intersection tests. Added sphere debug.

  [200-280423] - Bug fixes and optimisations. Added helper functions for :
  Converting RGB8, creating texture from colour, getting file extension, screen
  to ray, random v3f. Added load_audio function (.wav only for nonw). Added
  audio_loop function. Prototyping #0-0.

  [199-270423] - Added a few simd maths functions. Fixed bug with sprite
  shadows. Added render flags to mesh renderer and sprite renderer. Commit
  before starting prototype.

  [198-260423] - Added audio attenuation, spatial panning, audio source api.
   Removed runtime .glb, only using internal resources files. Bug fixing, general
   audio api work.

  [197-250423] - Added backend agnostic audio api. Fixed some bugs, and
  optimised sprite3d. Added variadic overload for input key state. Added
  on_lose_focus() callback. Audio api contains: 32 mono, 32 stereo voices, 2x music
  voices (for fades later), volume controls, music stop/start, mute/unmute,
  play_one_shot.

  [196-240423] - Improved sprite3d. Fixed sprite3d not maintaining its forward
   cardinal direction when camera changes forward direction. Added 2x2 matrix.
   Further testing, optimisations.

  [195-230423] - Added wireframe render pass for sprite/mesh. Optional (default)
   line_renderer as wireframe for sprites. Line_renderer now has each segment
   camera-facing. Fixed bug/lag with line_renderer. Removed mi_darray, replaced
   all instances with normal darray; there is a bug with it that caused
   indexing to return duplicate entries when iterating over the structure, know
   where the bug is but can't see obvious fix - temporarily removed.

  [194-220423] - Added 3d camera movement support to 3d sprites, works better
   than expected. Added variable skew counts. Tested animations without skew
   angles (works well). Started on xaudio2.

  [193-210423] - Fixed some bugs regarding flipped cardinal directions.
  Optimised _update_cardinal()_. Added support for sprite_renderer component
  shadows. Added proper support for packing sprites with variable
  skews/frame_counts. Added support for loading fewer(4/8) cardinal directions 
  than source sprites support.

  [192-200423] - Added camera skews for sprite 3d. Added forward vector to
  decern cardinal direction. Created UI for blender tool scripts.

  [191-190423] - Added 4/8/16 point cardinal support for packing/3d sprites.
   Fixed some bugs with sprite packing artifacts.

  [190-180423] - Added proper row packing support to sprite packer. Fixed
   partial row writes on sprite packer. Fixed some bugs with bmp writing.
   Continued work on 3d sprites.

  [189-170423] - Added custom binary mesh resource file format. Added 3d sprite
   component.

  [188-160423] - Fixed memory leak with _json_tree.release()_. Fixed bugs with
   material loading. Better handling of freeing resources when loading gltf/glb
   files. Improvements to json parser.

  [187-150423] - Fixed bugs with gltf material loading, better handling of 
   non-texture values (pbr/material values). 

  [186-140423] - Added support for loading .gltf files (json/bin/imgs), 
   previously only supported .glb. Added some util functions.

  [185-130423] - Added .dds texture loading. Testing compression stuff. Added
   proper controller support for windows/xbox. Added keymap layers, can add
   multiple keymap layers and switch to change context/input actions, works for
   both controller and keyboard. Other various bugfixes.

  [184-120423] - Added fast mipmap generation with diamond pattern box filter.
    Added mipmap loading if mips are present. Various cleanup and bugfixes.

  [183-110423] - Added box blur and gaussian resize filters.

  [182-100423] - Started to add controller abstraction. Added mips (wip). Added
  nearest neighbour resampling for manual mip generation (other interpolation
  methods later).

  [181-090423] - Fixed some bugs with point lights. Added mesh primitives. Added
    gizmo render mesh type (added some gizmo mesh primitives). Added skybox
    abstraction. General cleanup.

  [180-080423] - Fixed some issues with uid hash collisions. Added basic texture
    loading from gltf files, still needs work.

  [179-070423] - General cleanup, adding helper functions. Working on json_tree
    cleanup/release. Work to gltf api loading.

  [178-060423] - Added skyboxes.

  [177-050423] - Added bounding box component. Frustum culling by bounding box.
    working on configuring shadows. Improved gltf model loading, all submeshes
    now handled.

  [176-040423] - Adding gltf mesh loading abstraction, can load any .glb file's
    mesh data.

  [175-030423] - Added json_tree helper functions. Testing loading of gltf files.

  [175-030423] - Added json_tree helper functions. Testing loading of gltf files.

  [174-020423] - Added hash tables to json_tree for lookups.
  [173-020423] - Improved json parser, and fixed some parsing edges cases.

  [172-010423] - Json parser seems to be working, will need to check edge cases
    and track down any memory leaks.

  [171-310323] - Continued work on json parser.

  [170-300323] - Continued work on json parser.
  [169-300323] - Added basic string class.

  [168-290323] - Adding custom json parser.

  [167-280323] - Added temporary wip cgltf/png support. Models can now load with an
    index buffer.

  [166-270323] - Added basic sprite packer. Testing pseudo 3d sprites. Fixed
    some bugs with htable. Added alternate string hash (djb2).

  [165-260323] - General cleanup. Console log colours. Improved header
    separation.

  [164-250323] - Texture handles replaced with uids.
  [163-250323] - Replaced uuids with uids, previous implementation of uuids was
    not to standard spec. Improved uid generation, improved random_u64 generation.

  [162-240323] - Added managed index darray. Added material component. Added
    sprite batching for components. Added component debug print. Added
    sprites->combined mesh.

  [161-230323] - Further work to components. Htable improvements. (p.s uuid system
      was added in last few commits).
  [160-230323] - Base of component system working.

  [159-220323] - Improved htables, can now provide custom hash function. Started
                work on component system.
  [158-210323] - Added win32 min/max resizing, added on-focus callback (internal
      and external). Bug fixes.
  [157-210323] - Separated graphics context from platform context.

  [156-200323] - Aggressive file/folder restructuring.

  [155-190323] - Added framebuffer/texture/swapchain resizing.

  [154-180323] - Implemented fxaa paper. https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf

  [153-170323] - Cleanup. Work on post pass setup. Directional shadows working
                 with sprites.

  [152-160323] - Further cleanup and utility additions.

  [151-150323] - General cleanup.

  [150-140323] - Added shadow mapping for directional lights. Some changes to how depth textures are created and bound to framebuffers.

  [149-130323] - Game work[31].

  [148-120323] - Game work[30].

  [147-110323] - Fixed sdf stuff. Added shader hotloading (hlsl). Working on adding deferred directional shadows.
               - Game work[29].

  [146-100323] - Game work[28].

  [145-090323] - Fixed hotloading textures with non-power-of-2 dimensions.
               - Game work[27].

  [144-080323] - Added 'sprite bundle' that can load multiple quads from an .obj and load them as separate sprites.
               - Game work[26].

  [143-070323] - Sprites, models (and renderables) are now POD, there is no inheritance chain. This will likely be tuned in future.
               - Game work[25].

  [142-060323] - Started large renderable restructure to remove virtual functions / vtable stuff. 
               - Game work[24].

  [141-050323] - Game work[23].
  [140-050323] - Added hotload for textures. Added oneshot for text. Fixed target fps. Fixed _on_ms()_ not working correctly with multiple calls.

  [139-040323] - Game work[22].

  [138-030323] - Game work[21].
               
  [137-020323] - Added model load axis flip. Added load model->sprite (quad only).
               - Game work[20].

  [136-010323] - Added some new time functions (frame ms, internal avg fps). Added new hash function overload for char*, as well as new 
                htable comparison function. 
               - Game work[19].

  [135-280223] - Game work[18].

  [134-270223] - Game work[17].

  [133-260223] - Game work[16].

  [132-250223] - Game work[15].

  [131-240223] - Game work[14].

  [130-230223] - Added pivot to batched sprites.
               - Game work[13].

  [129-220223] - Fixed pivot scale offset.
               - Game work[12].

  [128-210223] - Game work[11].

  [127-200223] - Added pivot to sprite/pivot transformation.
               - Game work[10].

  [126-190223] - Added m4x4f inverse/determinant.
               - Game work[9].

  [125-180223] - Fixed bug with htable.contains_key().
               - Game work[8].

  [124-170223] - Game work[7].

  [123-160223] - Game work[6].
  [122-160223] - Added mouse scroll handling.
               - Models/sprites/batchers are now required to bind their own shader. At render, the currently bound shader is now used,
               not the shader of the primitive. May revert this in future.

  [121-150223] - Game work[5].
  [120-150223] - Added draw layers to renderables to improve draw call order.
               - Static batchers are now sent to normal draw call buffer.

  [119-140223] - Game work[4].

  [118-130223] - Game work[3].

  [117-120223] - Game work[2].

  [116-110223] - Game work[1].
               - Added basic tileset.

  [115-100223] - Game work[0].
  [114-090223] - Continuing some example testing.
               - Added near sprite transparency in main sprite shader.
               - Some changes to camera data updating.
               - Added vignette and blur to deferred quad shader.

  [113-080223] - Added basic 'ui-sprite'.
               - Some further example testing.
  [112-080223] - Separated sprite batcher stuff into its own source.
               - Cleaned up batcher api.
  [111-080223] - Added caching of sprite various densities. 
               - Sprite batchers now have a fixed size, and buffers are allocated with a maximum size on initialisation.
               If a batch call (begin/end) exceeds the limit, the buffered sprites get subdivided into another batch (separate draw call).

  [110-070223] - Added sprite density function, which basically generates the relevant data for a plane mesh with subdivisions.
               - Added render support for various density sprites.
               - Sprite batcher now is agnostic to sprite mesh densities.
               - Static sprite build support various sprite densities.
               - Added camera pos to view matrix constant buffer to allow for 'world bending'. (May move to separate cbuf in future).

  [109-060223] - Added contains_key function to hashtables.
               - Changed depth sorting to use quicksort instead of bubblesort. 
  [108-060223] - Added ping-pong to sprite animator.
               - Deferred render now holds onto the last drawn frame until
               _after_ the update callback function. This is to enable sampling of gbuffer textures if necessary (i.e guid/picking frame).
               - Sprite batcher draw procedure has been changed to enable the deferred frame changes. Batches now cache data, similar to 
               renderable procedure.
  [107-060223] - Added draw debug flag to engine properties.
               - Added mouse clicks to input.

  [106-050223] - DX shaders now add #defines on shader compile (will add ogl later).
               - Lights are now checked if visible before sending to gpu. (precursor to quadtree)
               - Lights now use handle system.
               - Removed references to 'fastlights'
               - Added 'on_ms' function.

  [105-050223] - Added framebuffer render texture formats for 16 and 32 bit.
               - Fixed bug with point light rendering.

  [104-040223] - Minor cleanup.

  [103-030223] - Added general purpose handle manager.
               - Added guid picking data to sprite batching.
  [102-030223] - Added sprite batcher depth sorting.
               - Some changes to benchmarking functions.

  [101-020223] - Added guids to renderables, the guid is used to identify various structs, indexing htables, etc.
               - All sprites are now added to a hash table with their key being their renderable guid.
               - Framebuffers can now support a 'staging' texture slot for dx11 (just one currently). OpenGL version won't need one.
               - Added an additional gbuffer texture that renders the guid of relevant elements (i.e sprites).
               - Added a function to retreive a single pixel from the guid buffer.
               - Added proper primitive_destroy function that does all necessary cleanup.
               - Few fixes here and there. 
               - Note: opengl backend is currently lagging behind dx11 with addition of new features.

  [100-010223] - Fixed bug with frustum culling.
               - Added temporary frustum cull 'overdraw', should move to using bbox bounds for precise culling.
               - Added 'observer/fly cam'.
  [099-010223] - Added plane/ray intersect function.

  [098-310123] - Added one-shot line render.
               - Some minor changes to cameras and how frustums are stored.
               - Re-enabled sprite batcher with new depth sorting stuff, it's in a basic working mode, needs to be bullet-proofed.
               - Restructured the line renderer, no longer has a 'line_renderer' object, just basic functions. The new model is similar to 
               the primitive/collider/MEMO67_handle.

  [097-300123] - Added on_collide functions for colliders.
               - Removed 'rect_2d', now there's just bbox and a separate collider struct.
               - A few minor changes to cameras and sprites.
               - Made a space-invaders-like game to test the engine/api (<300 lines). There are some obvious changes I'd make (and will make,
               most obvious are to do with how things/api interacts with handles and 'book-keeping' stuff).

  [095-290123] - Added functions to add colliders to sprites. Currently collisions are preempted when a sprite is moved,
               they are not all resolved as a single function, that'll come later when needed.
               - Changed layout of lights, point lights now support falloff and radius. (point lights currently not using 
               normals on the point light pass, will need to add another shader to use normals with lights for 3d model stuff).

  [094-280123] - Fixed some issues with depth sorting.
               - Input now uses a bitflag8 type, and some functions have been changed to improve response.
  [093-280123] - Added depth sorting, has temporarily broken batching.
               - Removed 'renderable' inheritance from text, not necessary, would require depth sorting to account for it.

  [092-270123] - Added sprite animator which handles animation functions (i.e play animation), 
               as well as specifying relevant data for the shader to use.
               - Testing things with an example scene.
               - Added build system stuff for examples.

  [091-260123] - Added uv tiling to sprites/sprite detail.
  [090-260123] - Fixed bug with dx11 sampling interpolated tex_ids, resulting in glitches when multiple textures
               are bound to a sprite batcher.
  [089-260123] - Fixed bitwise rgba parse being read backwards.
               - Fixed a few oversights from last lighting changes.
  [088-260123] - Lights now handle types properly.
               - Lights now have a separate constant buffer for point lights and directional lights, 
              this is to reduce loops in shaders, previously they were all packed together and first pass, as well as 
              second pass light shaders had the same constant buffers (i.e light count). The two pass lighting is to 
              support resolution independence for point lights and directional lights. (i.e, can crush resolution of either
              light types to improve performance if desired).
  [087-260123] - Changed GID references to handles, to avoid confusion with typical guid/uuids.

  [086-250123] - Added single header for projects to use with dynamic link build.
  [085-250123] - Textures now use a similar handle system as primitives.
  [084-250123] - Removed some redundancies, cleanup to core render loop.
  [083-250123] - Primitives now use a header/primitive pair, which can be
              looked up with a single handle. This is in keeping with decoupling render
              primitives from last version, whilst keeping code a lot cleaner and further
              decouples primitive data as external structures (renderables) keep no
              primitive data references, only a handle. This was a very large change and may require patches.

  [082-240123] - Decoupled render primitives and gapi buffer data. For better or worse, hopefully handles will be robust.
  [081-240123] - Changes to lighting primitives as well as main 'lights' container.
  [080-240123] - Added basics for a shared library build. Needs some decoupling of internals to keep the import header light.
               - Added basic example using a linked .dll build of the engine.
  [079-240123] - Line renderer now rendered as a forward pass before UI.

  [078-230123] - Text moved to a forward render pass, was causing unnecessary complications with main deferred pass.
  [077-230123] - Added aspect ratio to text.
               - Added rect and wrapping to text.
  [076-230123] - Added text resizing/changing.

  [075-220123] - Text shaders revised.
               - Deferred text v0 complete.

  [074-210123] - Fixed bugs with text uvs.
               - Sourced dx11 depth bug.
               - Fixed bug with passing colour data to buffer for text.
               - Vertex data buffer now void*, not float*.

  [073-200123] - Continued work on dx11 text backend.

  [072-190123] - Added text dx11 backend.

  [071-180123] - Commenting.

  [070-170123] - Minor cleanups.

  [069-160123] - Lighting cleanups.

  [068-150123] - Primitive union renaming.

  [067-140123] - Cleanups. 

  [066-130123] - Minor cleanup. 

  [065-120123] - Added primitive remove function, untested.

  [064-110123] - Added primitive handle.

  [063-100123] - Few cleanups.

  [062-090123] - Minor cleanups.

  [061-080123] - Fixed bug with bitmap text uvs.

  [060-070123] - Added bitmap text rendering, still some bugs to fix.

  [059-060123] - Temporary fix for depth buffer resolution mismatch for light pass.
  [058-060123] - Fixed bug with sprite batcher and normal data.

  [057-050123] - Cleaned up primitive_render code. Added some render stat stuff. Fixed HLSL deferred shaders.

  [056-040123] - Added depth buffer texture to opengl version of gbuffer pass, forgot about it.
  [055-040123] - Added functions to bind specific framebuffer slots.
               - Added functions to clear all render targets/attachments, necessary to individually clear for opengl
              as when attachments are of different size. (opengl renders the smallest of the attachments, so large ones are only partially
              cleared/drawn to when cleared together). Dx11 doesn't support rendertargets of different size, but they are cleared
              individually with ClearRenderTargetView() anyway." 

  [054-040123] - Added render view resize function.
               - Changed window creation to use AdjustWindowRect() (win32), necessary to get consistent resize between dx11 and opengl, 
               I think opengl's ndc are set with the initial gl context, so glViewport() sets the correct w/h without needing to adjust 
               to account for border/style sizes, whereas dx11 requires adjustment. Creating the window with AdjustWindowRect() normalises
               behaviour between dx11 and opengl.
  
  [053-030123] - Dx11 support for framebuffer stuff is in a working state.
               - Various API changes, relating to the new Dx11 changes.

  [052-020123] - Working on adding Dx11 support for the new framebuffer stuff.
               - Did a small 2.5D test (DST style). Cool.

  [051-010123] - Changelog updates.
  [050-010123] - Initial commits.

[changelog preface]

GitHub initial commit started at svn version [050], 010123.

[050-010123] contains the following features:

  -Framebuffer stuff.

  -Collisions (very basic, preemptive function).

  -Input handling (keyboard & mouse).

  -Timing (basic).

  -Line renderer.
    -Supports sdf-mode (as well as mesh mode) which renders lines as an sdf
      surface. Much slower, but cool.

  -SDF surface.
    -SDFs rendered in-shader with raymarching.
  
  -Camera (basic)
    -Orthographic and perspective.

  -Model, View, Projection matrices.

  -Matrices and Vectors (templated).
    -M4x4 matrices support SIMD multiplication.

  -Buffer resolution independence:
    -Lighting passes as well as final frame resolution can be set.

  -Lighting, directional and point.
    -Currently lights are deferred only. 
    -Rendered in two passes, first directional lights, then point lights.

  -Deferred rendering.
    -When deferred rendering is enabled, Memo67's internal loop binds a deferred
    framebuffer, subsequent draw calls are then rendered to the gbuffer/s.
    Lighting is then rendered with the gbuffer/s as input (as well as lighting
    constant buffers) before finally rendering the frame to a quad.

  -Shader system:
    -Single .sha shader files are written containing both .hlsl and .glsl code, 
      the file separates the two shader languages, as well as vertex and pixel
      shaders with #defines.
    -Constant buffers.
    -Each 'default' (i.e part of Memo67, not a custom added shader) shader corresponds to a enum value.
    -'Default' shaders include gbuffer variants, phong model, gouraud model, sprite, generic model, line, etc.

  -Sprite rendering with animation.

  -Sprite batcher.

  -OBJ model loader. (basic)

  -BMP image loader.

  -Dx11 and OpenGL3.3 backends. Current version [050] has not yet implemented
    Dx11 for the new framebuffer deferred stuff.

  -Custom data structures:
    -Dynamic array
    -Hashtable, current hash function starts with a constant and then uses a
      prime number table along with various circular shifts, additions,
      multiplications etc, works well enough for now.
    -Linked list (single)

Official start date 021122. - Project started 260922 with svn commit [001],
however, real work started on 021122 with svn commit [021].
